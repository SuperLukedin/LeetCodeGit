class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        PriorityQueue<String> toBeSorted = new PriorityQueue<String>(
            (w1, w2) -> map.get(w2) != map.get(w1)? map.get(w1) - map.get(w2) : w2.compareTo(w1));
        for (String word : map.keySet()) {
            toBeSorted.offer(word);
            if (toBeSorted.size() > k) {
                toBeSorted.poll();
            }
        }
        List<String> ans = new ArrayList();
        while(!toBeSorted.isEmpty()) {
            ans.add(toBeSorted.poll());
        }
        Collections.reverse(ans);
        return ans;
    }
}