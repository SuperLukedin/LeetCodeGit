{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red242\green242\blue242;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c96078\c96078\c96078;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
{\info
{\keywords cursorLocation=192, fitsPagesWidth=1}}\margl1008\margr1008\margt1008\vieww15520\viewh15180\viewkind1\viewscale121
\deftab720
\pard\pardeftab720\sl580\partightenfactor0

\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 692.\'a0Top K Frequent Words
\f1\fs28 \
\pard\pardeftab720\sl320\sa200\partightenfactor0
\cf2 Given a non-empty list of words, return the\'a0
\i k
\i0 \'a0most frequent elements.\
Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b \cf2 Example 1:
\b0 \cb1 \uc0\u8232 \cb3 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs26 \cf2 \cb4 Input:
\f3\b0  ["i", "love", "leetcode", "i", "love", "coding"], k = 2\

\f2\b Output:
\f3\b0  ["i", "love"]\

\f2\b Explanation:
\f3\b0  "i" and "love" are the two most frequent words.\
    Note that "i" comes before "love" due to a lower alphabetical order.\
\pard\pardeftab720\sl320\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 \
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b \cf2 Example 2:
\b0 \cb1 \uc0\u8232 \cb3 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs26 \cf2 \cb4 Input:
\f3\b0  ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4\

\f2\b Output:
\f3\b0  ["the", "is", "sunny", "day"]\

\f2\b Explanation:
\f3\b0  "the", "is", "sunny" and "day" are the four most frequent words,\
    with the number of occurrence being 4, 3, 2 and 1 respectively.\
\pard\pardeftab720\sl320\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 \
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b \cf2 Note:
\b0 \cb1 \uc0\u8232 \cb3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You may assume\'a0
\i k
\i0 \'a0is always valid, 1 \uc0\u8804 \'a0
\i k
\i0 \'a0\uc0\u8804  number of unique elements.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Input words contain only lowercase letters.\cb1 \
\pard\pardeftab720\sl320\sa200\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b \cf2 Follow up:
\b0 \cb1 \uc0\u8232 \cb3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Try to solve it in\'a0
\i O
\i0 (
\i n
\i0 \'a0log\'a0
\i k
\i0 ) time and\'a0
\i O
\i0 (
\i n
\i0 ) extra space.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl360\slmult1\pardirnatural\partightenfactor0

\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
class Solution \{\
    public List<String> topKFrequent(String[] words, int k) \{\
        Map<String, Integer> map = new HashMap();\
        for (String word : words) \{\
            map.put(word, (map.getOrDefault(word, 0) + 1));\
        \}\
        List<String> toBeSorted = new ArrayList(map.keySet());\
        Collections.sort(toBeSorted, (w1, w2) -> map.get(w1) != map.get(w2)? map.get(w2) - map.get(w1) : w1.compareTo(w2));\
        return toBeSorted.subList(0, k);                    \
    \}\
\}}